// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
        // x -> 0
        Not(in=zx , out=nzx );
        And(a=x[0] , b=nzx , out=zx0 );
        And(a=x[1] , b=nzx , out=zx1 );
        And(a=x[2] , b=nzx , out=zx2 );
        And(a=x[3] , b=nzx , out=zx3 );
        And(a=x[4] , b=nzx , out=zx4 );
        And(a=x[5] , b=nzx , out=zx5 );
        And(a=x[6] , b=nzx , out=zx6 );
        And(a=x[7] , b=nzx , out=zx7 );
        And(a=x[8] , b=nzx , out=zx8 );
        And(a=x[9] , b=nzx , out=zx9 );
        And(a=x[10] , b=nzx , out=zx10 );
        And(a=x[11] , b=nzx , out=zx11 );
        And(a=x[12] , b=nzx , out=zx12 );
        And(a=x[13] , b=nzx , out=zx13 );
        And(a=x[14] , b=nzx , out=zx14 );
        And(a=x[15] , b=nzx , out=zx15 );

        // x -> !x
        Not(in=zx0 , out=zxtmp0 );
        Not(in=zx1 , out=zxtmp1 );
        Not(in=zx2 , out=zxtmp2 );
        Not(in=zx3 , out=zxtmp3 );
        Not(in=zx4 , out=zxtmp4 );
        Not(in=zx5 , out=zxtmp5 );
        Not(in=zx6 , out=zxtmp6 );
        Not(in=zx7 , out=zxtmp7 );
        Not(in=zx8 , out=zxtmp8 );
        Not(in=zx9 , out=zxtmp9 );
        Not(in=zx10 , out=zxtmp10 );
        Not(in=zx11 , out=zxtmp11 );
        Not(in=zx12 , out=zxtmp12 );
        Not(in=zx13 , out=zxtmp13 );
        Not(in=zx14 , out=zxtmp14 );
        Not(in=zx15 , out=zxtmp15 );

        Mux(a=zx0 , b=zxtmp0 , sel=nx , out=nzx0 );
        Mux(a=zx1 , b=zxtmp1 , sel=nx , out=nzx1 );
        Mux(a=zx2 , b=zxtmp2 , sel=nx , out=nzx2 );
        Mux(a=zx3 , b=zxtmp3 , sel=nx , out=nzx3 );
        Mux(a=zx4 , b=zxtmp4 , sel=nx , out=nzx4 );
        Mux(a=zx5 , b=zxtmp5 , sel=nx , out=nzx5 );
        Mux(a=zx6 , b=zxtmp6 , sel=nx , out=nzx6 );
        Mux(a=zx7 , b=zxtmp7 , sel=nx , out=nzx7 );
        Mux(a=zx8 , b=zxtmp8 , sel=nx , out=nzx8 );
        Mux(a=zx9 , b=zxtmp9 , sel=nx , out=nzx9 );
        Mux(a=zx10 , b=zxtmp10 , sel=nx , out=nzx10 );
        Mux(a=zx11 , b=zxtmp11 , sel=nx , out=nzx11 );
        Mux(a=zx12 , b=zxtmp12 , sel=nx , out=nzx12 );
        Mux(a=zx13 , b=zxtmp13 , sel=nx , out=nzx13 );
        Mux(a=zx14 , b=zxtmp14 , sel=nx , out=nzx14 );
        Mux(a=zx15 , b=zxtmp15 , sel=nx , out=nzx15 );

        // y->0
        Not(in=zy , out=nzy );
        And(a=y[0] , b=nzy, out=zy0 );
        And(a=y[1] , b=nzy, out=zy1 );
        And(a=y[2] , b=nzy, out=zy2 );
        And(a=y[3] , b=nzy, out=zy3 );
        And(a=y[4] , b=nzy, out=zy4 );
        And(a=y[5] , b=nzy, out=zy5 );
        And(a=y[6] , b=nzy, out=zy6 );
        And(a=y[7] , b=nzy, out=zy7 );
        And(a=y[8] , b=nzy, out=zy8 );
        And(a=y[9] , b=nzy, out=zy9 );
        And(a=y[10] , b=nzy, out=zy10 );
        And(a=y[11] , b=nzy, out=zy11 );
        And(a=y[12] , b=nzy, out=zy12 );
        And(a=y[13] , b=nzy, out=zy13 );
        And(a=y[14] , b=nzy, out=zy14 );
        And(a=y[15] , b=nzy, out=zy15 );

        // y->!y
        Not(in=zy0 , out=zytmp0 );
        Not(in=zy1 , out=zytmp1 );
        Not(in=zy2 , out=zytmp2 );
        Not(in=zy3 , out=zytmp3 );
        Not(in=zy4 , out=zytmp4 );
        Not(in=zy5 , out=zytmp5 );
        Not(in=zy6 , out=zytmp6 );
        Not(in=zy7 , out=zytmp7 );
        Not(in=zy8 , out=zytmp8 );
        Not(in=zy9 , out=zytmp9 );
        Not(in=zy10 , out=zytmp10 );
        Not(in=zy11 , out=zytmp11 );
        Not(in=zy12 , out=zytmp12 );
        Not(in=zy13 , out=zytmp13 );
        Not(in=zy14 , out=zytmp14 );
        Not(in=zy15 , out=zytmp15 );

        Mux(a=zy0 , b=zytmp0 , sel=ny , out=nzy0 );
        Mux(a=zy1 , b=zytmp1 , sel=ny , out=nzy1 );
        Mux(a=zy2 , b=zytmp2 , sel=ny , out=nzy2 );
        Mux(a=zy3 , b=zytmp3 , sel=ny , out=nzy3 );
        Mux(a=zy4 , b=zytmp4 , sel=ny , out=nzy4 );
        Mux(a=zy5 , b=zytmp5 , sel=ny , out=nzy5 );
        Mux(a=zy6 , b=zytmp6 , sel=ny , out=nzy6 );
        Mux(a=zy7 , b=zytmp7 , sel=ny , out=nzy7 );
        Mux(a=zy8 , b=zytmp8 , sel=ny , out=nzy8 );
        Mux(a=zy9 , b=zytmp9 , sel=ny , out=nzy9 );
        Mux(a=zy10 , b=zytmp10 , sel=ny , out=nzy10 );
        Mux(a=zy11 , b=zytmp11 , sel=ny , out=nzy11 );
        Mux(a=zy12 , b=zytmp12 , sel=ny , out=nzy12 );
        Mux(a=zy13 , b=zytmp13 , sel=ny , out=nzy13 );
        Mux(a=zy14 , b=zytmp14 , sel=ny , out=nzy14 );
        Mux(a=zy15 , b=zytmp15 , sel=ny , out=nzy15 );

        // f -> x+y or x&y
        HalfAdder(a=nzx0 , b=nzy0 , sum=add0 , carry=c0 );
        FullAdder(a=nzx1 , b=nzy1 , c=c0 , sum=add1 , carry=c1 );
        FullAdder(a=nzx2 , b=nzy2 , c=c1 , sum=add2 , carry=c2 );
        FullAdder(a=nzx3 , b=nzy3 , c=c2 , sum=add3 , carry=c3 );
        FullAdder(a=nzx4 , b=nzy4 , c=c3 , sum=add4 , carry=c4 );
        FullAdder(a=nzx5 , b=nzy5 , c=c4 , sum=add5 , carry=c5 );
        FullAdder(a=nzx6 , b=nzy6 , c=c5 , sum=add6 , carry=c6 );
        FullAdder(a=nzx7 , b=nzy7 , c=c6 , sum=add7 , carry=c7 );
        FullAdder(a=nzx8 , b=nzy8 , c=c7 , sum=add8 , carry=c8 );
        FullAdder(a=nzx9 , b=nzy9 , c=c8 , sum=add9 , carry=c9 );
        FullAdder(a=nzx10 , b=nzy10 , c=c9 , sum=add10 , carry=c10 );
        FullAdder(a=nzx11 , b=nzy11 , c=c10 , sum=add11 , carry=c11 );
        FullAdder(a=nzx12 , b=nzy12 , c=c11 , sum=add12 , carry=c12 );
        FullAdder(a=nzx13 , b=nzy13 , c=c12 , sum=add13 , carry=c13 );
        FullAdder(a=nzx14 , b=nzy14 , c=c13 , sum=add14 , carry=c14 );
        FullAdder(a=nzx15 , b=nzy15 , c=c14 , sum=add15 , carry=c15 );

        And(a=nzx0 , b=nzy0 , out=and0 );
        And(a=nzx1 , b=nzy1 , out=and1 );
        And(a=nzx2 , b=nzy2 , out=and2 );
        And(a=nzx3 , b=nzy3 , out=and3 );
        And(a=nzx4 , b=nzy4 , out=and4 );
        And(a=nzx5 , b=nzy5 , out=and5 );
        And(a=nzx6 , b=nzy6 , out=and6 );
        And(a=nzx7 , b=nzy7 , out=and7 );
        And(a=nzx8 , b=nzy8 , out=and8 );
        And(a=nzx9 , b=nzy9 , out=and9 );
        And(a=nzx10 , b=nzy10 , out=and10 );
        And(a=nzx11 , b=nzy11 , out=and11 );
        And(a=nzx12 , b=nzy12 , out=and12 );
        And(a=nzx13 , b=nzy13 , out=and13 );
        And(a=nzx14 , b=nzy14 , out=and14 );
        And(a=nzx15 , b=nzy15 , out=and15 );

        Mux(a=and0 , b=add0 , sel=f , out=out0 );
        Mux(a=and1 , b=add1 , sel=f , out=out1 );
        Mux(a=and2 , b=add2 , sel=f , out=out2 );
        Mux(a=and3 , b=add3 , sel=f , out=out3 );
        Mux(a=and4 , b=add4 , sel=f , out=out4 );
        Mux(a=and5 , b=add5 , sel=f , out=out5 );
        Mux(a=and6 , b=add6 , sel=f , out=out6 );
        Mux(a=and7 , b=add7 , sel=f , out=out7 );
        Mux(a=and8 , b=add8 , sel=f , out=out8 );
        Mux(a=and9 , b=add9 , sel=f , out=out9 );
        Mux(a=and10 , b=add10 , sel=f , out=out10 );
        Mux(a=and11 , b=add11 , sel=f , out=out11 );
        Mux(a=and12 , b=add12 , sel=f , out=out12 );
        Mux(a=and13 , b=add13 , sel=f , out=out13 );
        Mux(a=and14 , b=add14 , sel=f , out=out14 );
        Mux(a=and15 , b=add15 , sel=f , out=out15 );

        // no
        Not(in=out0 , out=outtemp0 );
        Not(in=out1 , out=outtemp1 );
        Not(in=out2 , out=outtemp2 );
        Not(in=out3 , out=outtemp3 );
        Not(in=out4 , out=outtemp4 );
        Not(in=out5 , out=outtemp5 );
        Not(in=out6 , out=outtemp6 );
        Not(in=out7 , out=outtemp7 );
        Not(in=out8 , out=outtemp8 );
        Not(in=out9 , out=outtemp9 );
        Not(in=out10 , out=outtemp10 );
        Not(in=out11 , out=outtemp11 );
        Not(in=out12 , out=outtemp12 );
        Not(in=out13 , out=outtemp13 );
        Not(in=out14 , out=outtemp14 );
        Not(in=out15 , out=outtemp15 );

        Mux(a=out0 , b=outtemp0 , sel=no , out=out[0] );
        Mux(a=out1 , b=outtemp1 , sel=no , out=out[1] );
        Mux(a=out2 , b=outtemp2 , sel=no , out=out[2] );
        Mux(a=out3 , b=outtemp3 , sel=no , out=out[3] );
        Mux(a=out4 , b=outtemp4 , sel=no , out=out[4] );
        Mux(a=out5 , b=outtemp5 , sel=no , out=out[5] );
        Mux(a=out6 , b=outtemp6 , sel=no , out=out[6] );
        Mux(a=out7 , b=outtemp7 , sel=no , out=out[7] );
        Mux(a=out8 , b=outtemp8 , sel=no , out=out[8] );
        Mux(a=out9 , b=outtemp9 , sel=no , out=out[9] );
        Mux(a=out10 , b=outtemp10 , sel=no , out=out[10] );
        Mux(a=out11 , b=outtemp11 , sel=no , out=out[11] );
        Mux(a=out12 , b=outtemp12 , sel=no , out=out[12] );
        Mux(a=out13 , b=outtemp13 , sel=no , out=out[13] );
        Mux(a=out14 , b=outtemp14 , sel=no , out=out[14] );
        Mux(a=out15 , b=outtemp15 , sel=no , out=out[15] );

        // isnegative
        Mux(a=out15 , b=outtemp15 , sel=no , out=ng );

        // iszero
        Mux(a=out0 , b=outtemp0 , sel=no , out=zr0 );
        Mux(a=out1 , b=outtemp1 , sel=no , out=zr1 );
        Mux(a=out2 , b=outtemp2 , sel=no , out=zr2 );
        Mux(a=out3 , b=outtemp3 , sel=no , out=zr3 );
        Mux(a=out4 , b=outtemp4 , sel=no , out=zr4 );
        Mux(a=out5 , b=outtemp5 , sel=no , out=zr5 );
        Mux(a=out6 , b=outtemp6 , sel=no , out=zr6 );
        Mux(a=out7 , b=outtemp7 , sel=no , out=zr7 );
        Mux(a=out8 , b=outtemp8 , sel=no , out=zr8 );
        Mux(a=out9 , b=outtemp9 , sel=no , out=zr9 );
        Mux(a=out10 , b=outtemp10 , sel=no , out=zr10 );
        Mux(a=out11 , b=outtemp11 , sel=no , out=zr11 );
        Mux(a=out12 , b=outtemp12 , sel=no , out=zr12 );
        Mux(a=out13 , b=outtemp13 , sel=no , out=zr13 );
        Mux(a=out14 , b=outtemp14 , sel=no , out=zr14 );
        Mux(a=out15 , b=outtemp15 , sel=no , out=zr15 );
        Or(a=zr0 , b=zr1 , out=zr01 );
        Or(a=zr2 , b=zr3 , out=zr23 );
        Or(a=zr4 , b=zr5 , out=zr45 );
        Or(a=zr6 , b=zr7 , out=zr67 );
        Or(a=zr01 , b=zr23 , out=zr0123 );
        Or(a=zr45 , b=zr67 , out=zr4567 );
        Or(a=zr0123 , b=zr4567 , out=zr01234567 );
        Or(a=zr01234567 , b=zr8 , out=zr012345678 );
        Or(a=zr012345678 , b=zr9 , out=zr0123456789 );
        Or(a=zr0123456789 , b=zr10 , out=zr012345678910 );
        Or(a=zr012345678910 , b=zr11 , out=zr01234567891011 );
        Or(a=zr01234567891011 , b=zr12 , out=zr0123456789101112 );
        Or(a=zr0123456789101112 , b=zr13 , out=zr012345678910111213 );
        Or(a=zr012345678910111213 , b=zr14 , out=zr01234567891011121314 );
        Or(a=zr01234567891011121314 , b=zr15 , out=zrtemp );
        Not(in=zrtemp , out=zr );
}