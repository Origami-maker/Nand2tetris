// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // Manipulate x
    // 1. x = 0 if zx == 1
    Mux16(a=x, b=false, sel=zx, out=zxOut);
    // 2. x = !x if nx == 1
    Not16(in=zxOut, out=nxOut);
    Mux16(a=zxOut, b=nxOut, sel=nx, out=xOut);

    // Manipulate y
    // 3. y = 0 if zy == 1
    Mux16(a=y, b=false, sel=zy, out=zyOut);
    // 4. y = !y if ny == 1
    Not16(in=zyOut, out=nyOut);
    Mux16(a=zyOut, b=nyOut, sel=ny, out=yOut);

    // Compute out
    // 5. out = x + y if f == 1 else out = x & y
    Add16(a=xOut, b=yOut, out=addOut);
    And16(a=xOut, b=yOut, out=andOut);
    Mux16(a=andOut, b=addOut, sel=f, out=tempout);

    // 6. out = !out if no == 1
    Not16(in=tempout, out=nOut);
    Mux16(a=tempout, b=nOut, sel=no, out=out,
        out[0]=out0, out[1]=out1, out[2]=out2, out[3]=out3,
        out[4]=out4, out[5]=out5, out[6]=out6, out[7]=out7,
        out[8]=out8, out[9]=out9, out[10]=out10, out[11]=out11,
        out[12]=out12, out[13]=out13, out[14]=out14, out[15]=out15,
        out[15]=ng);

    // Compute zr and ng
    // 7. zr = 1 if out == 0 else zr = 0
    Or(a=out0, b=out1, out=or0);
    Or(a=out2, b=out3, out=or1);
    Or(a=out4, b=out5, out=or2);
    Or(a=out6, b=out7, out=or3);
    Or(a=out8, b=out9, out=or4);
    Or(a=out10, b=out11, out=or5);
    Or(a=out12, b=out13, out=or6);
    Or(a=out14, b=out15, out=or7);
    Or(a=or0, b=or1, out=or8);
    Or(a=or2, b=or3, out=or9);
    Or(a=or4, b=or5, out=or10);
    Or(a=or6, b=or7, out=or11);
    Or(a=or8, b=or9, out=or12);
    Or(a=or10, b=or11, out=or13);
    Or(a=or12, b=or13, out=tempzr);
    Not(in=tempzr, out=zr);
}